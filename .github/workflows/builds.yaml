name: Builds

on:
  release:
    types: [created]
  push:
    branches:
      - master
      - "v[0-9]+.[0-9]+"
    paths-ignore:
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/workflows/**"
      - "docs/**"
      - "!.github/workflows/builds.yaml"
      - .clang-format
      - .clang-tidy
      - .gitattributes
      - .github/dependabot.yaml
      - .gitignore
      - .shellcheckrc
      - LICENSE
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/workflows/**"
      - "docs/**"
      - "!.github/workflows/builds.yaml"
      - .github/dependabot.yaml
      - .clang-format
      - .clang-tidy
      - .gitattributes
      - .gitignore
      - .shellcheckrc
      - LICENSE

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

permissions: {}

env:
  MESON_TESTTHREADS: 1

jobs:
  determine-tag:
    runs-on: ubuntu-latest
    continue-on-error: false
    outputs:
      tag: ${{ steps.determine-tag.outputs.tag }}

    steps:
      - name: Determine tag
        id: determine-tag
        run: |
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            echo "::set-output name=tag::$GITHUB_BASE_REF"
          else
            echo "::set-output name=tag::$GITHUB_REF_NAME"
          fi

  normal:
    runs-on: ubuntu-latest
    needs:
      - determine-tag
    container:
      image: ghcr.io/hse-project/ci-images/${{ matrix.image }}:${{ needs.determine-tag.outputs.tag }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - almalinux-8
          - almalinux-9
          - cross-s390x
          - fedora-36
          - ubuntu-18.04
          - ubuntu-20.04
          - ubuntu-22.04
        toolchain: [gcc, clang]
        buildtype: [release, debug]

    steps:
        # Let's talk about GitHub Actions for a minute, and why this has to
        # exist. GitHub Actions doesn't support `matrix` in jobs.<job>.if or
        # jobs.<job>.env.<var>, so we are left with this step exporting the
        # environment variable, and then forced to add or append to
        # jobs.<job>.steps.<step>.if. It is disgusting, and I hate it. You might
        # ask, "Why don't you exit the job early as successful?" Reader, you're
        # so funny. GitHub Actions doesn't support this basic feature that all
        # other CI systems use. I can't even cancel the job. Fun system :).
        #
        # https://github.com/actions/runner/issues/662
      - name: To skip or not to skip
        id: to-skip
        shell: sh +e {0}
        run: |
          skip="false"
          echo "${{ matrix.image }}" | grep -P --quiet "(almalinux-8|almalinux-9|ubuntu-20.04|ubuntu-22.04)"
          if [ $? -eq 0 ] && [ "$GITHUB_EVENT_NAME" != "release" ]; then
            skip="true"
          fi

          echo "::set-output name=skip::$skip"

      - name: Checkout HSE
        if: ${{ steps.to-skip.outputs.skip == 'false' }}
        uses: actions/checkout@v3

      - name: Determine branches
        id: determine-branches
        if: ${{ steps.to-skip.outputs.skip == 'false' }}
        shell: sh +e {0}
        run: |
          for p in hse-java hse-python; do
            branch=master
            if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
              git ls-remote --exit-code --heads \
                "https://github.com/hse-project/$p.git" "$GITHUB_HEAD_REF" \
                > /dev/null

              if [ $? -eq 0 ]; then
                branch="$GITHUB_HEAD_REF"
              fi
            elif [ "$GITHUB_EVENT_NAME" = "release" ]; then
              branch=$(git rev-parse --abbrev-ref HEAD)
            else
              git ls-remote --exit-code --heads \
                "https://github.com/hse-project/$p.git" "$GITHUB_REF" \
                > /dev/null

              if [ $? -eq 0 ]; then
                branch="$GITHUB_REF_NAME"
              fi
            fi

            echo "::set-output name=$p::$branch"
          done

      - name: Checkout hse-java
        if: ${{ steps.to-skip.outputs.skip == 'false' }}
        uses: actions/checkout@v3
        with:
          repository: hse-project/hse-java
          path: subprojects/hse-java
          ref: ${{ steps.determine-branches.outputs.hse-java }}

      - name: Checkout hse-python
        if: ${{ steps.to-skip.outputs.skip == 'false' }}
        uses: actions/checkout@v3
        with:
          repository: hse-project/hse-python
          path: subprojects/hse-python
          ref: ${{ steps.determine-branches.outputs.hse-python }}

      - name: Export Maven local repository
        id: maven-local-repository
        if: ${{ steps.to-skip.outputs.skip == 'false' }}
        run: |
          local_repository=$(mvn --file subprojects/hse-java/pom.xml help:evaluate -Dexpression=settings.localRepository --quiet -DforceStdout)
          echo "::set-output name=local-repository::$local_repository"

      - name: Cache Maven dependencies
        id: maven-dependencies
        if: ${{ steps.to-skip.outputs.skip == 'false' }}
        uses: actions/cache@v3
        with:
          path: ${{ steps.maven-local-repository.outputs.local-repository }}
          key: maven-dependencies-${{ hashFiles('subprojects/hse-java/pom.xml') }}

      # Download all dependencies up front if cache wasn't hit. Will keep
      # Maven from downloading dependencies during the test phase which could
      # cause tests to timeout.
      - name: Download Maven dependencies
        if: ${{ steps.to-skip.outputs.skip == 'false' && steps.maven-dependencies.outputs.cache-hit != 'true' }}
        run: |
          mvn --file subprojects/hse-java/pom.xml dependency:go-offline

      - name: Cache Meson packagecache
        id: meson-packagecache
        if: ${{ steps.to-skip.outputs.skip == 'false' }}
        uses: actions/cache@v3
        with:
          path: subprojects/packagecache
          key: meson-packagecache-${{ hashFiles('subprojects/hse/subprojects/*.wrap') }}

      - name: Download Meson subprojects
        if: ${{ steps.to-skip.outputs.skip == 'false' && !steps.meson-packagecache.outputs.cache-hit }}
        run: |
          meson subprojects download

      # userspace-rcu leaks warnings as errors due to static inlines. Another
      # mitigation is adding -U_LGPL_SOURCE which moves the functions out of
      # line. Unfortunately you can no longer embed cds_list_head in structs.
      # This seems like the easiest solution regarding WERROR.
      - name: Export cross arguments
        if: ${{ steps.to-skip.outputs.skip == 'false' && startsWith(matrix.image, 'cross') }}
        run: |
          image="${{ matrix.image }}"
          echo "CROSS_ARGS=--cross-file cross/${image##*-}.ini --cross-file cross/common.ini" >> "$GITHUB_ENV"
          echo "WERROR=" >> "$GITHUB_ENV"

      - name: Export non-cross arguments
        if: ${{ steps.to-skip.outputs.skip == 'false' && !startsWith(matrix.image, 'cross') }}
        run: |
          echo "WERROR=--werror" >> "$GITHUB_ENV"

      # Download all dependencies up front if cache wasn't hit. Will keep
      # Maven from downloading dependencies during the test phase which could
      # cause tests to timeout.
      - name: Download Maven Dependencies
        if: ${{ steps.to-skip.outputs.skip == 'false' && steps.setup-java.outputs.cache-hit != 'true' }}
        run: |
          mvn --file subprojects/hse-java/pom.xml dependency:go-offline

      - name: Setup gcc toolchain
        if: ${{ steps.to-skip.outputs.skip == 'false' && matrix.toolchain == 'gcc' }}
        run: |
          echo "CC=gcc" >> "$GITHUB_ENV"
          echo "CXX=g++" >> "$GITHUB_ENV"

      - name: Setup clang toolchain
        if: ${{ steps.to-skip.outputs.skip == 'false' && matrix.toolchain == 'clang' }}
        run: |
          echo "CC=clang" >> "$GITHUB_ENV"
          echo "CXX=clang++" >> "$GITHUB_ENV"

        # Ignore deprecation warnings on 20.04 due to:
        #     https://github.com/cython/cython/issues/3474
      - name: Setup clang toolchain on Ubuntu 20.04
        if: ${{ steps.to-skip.outputs.skip == 'false' && matrix.toolchain == 'clang' && matrix.image == 'ubuntu-20.04' }}
        run: |
          echo "CFLAGS=-Wno-deprecated ${CFLAGS}" >> "$GITHUB_ENV"

        # Tools are disabled due to deprecated support in Meson for CMake
        # versions this old.
      - name: Setup
        if: ${{ steps.to-skip.outputs.skip == 'false' }}
        run: |
          meson builddir --fatal-meson-warnings $WERROR $CROSS_ARGS \
            --buildtype=${{ matrix.buildtype }} -Dtools=enabled \
            -Ddocs=disabled -Dbindings=all

      - name: Build
        if: ${{ steps.to-skip.outputs.skip == 'false' }}
        run: |
          ninja -C builddir

      - name: Test
        if: ${{ steps.to-skip.outputs.skip == 'false' && !startsWith(matrix.image, 'cross') }}
        run: |
          meson test -C builddir --setup=ci --print-errorlogs --no-stdsplit

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: ${{ github.job }}-${{ matrix.image }}-${{ matrix.toolchain }}-${{ matrix.buildtype }}
          path: |
            builddir/meson-logs/
            /var/log/messages
            /var/log/syslog

  asan-ubsan:
    runs-on: ubuntu-latest
    needs:
      - determine-tag
    container:
      image: ghcr.io/hse-project/ci-images/fedora-36:${{ needs.determine-tag.outputs.tag }}
    strategy:
      fail-fast: false
      matrix:
        buildtype: [release, debug]

    steps:
      - name: Checkout HSE
        uses: actions/checkout@v3

      - name: Cache Meson packagecache
        uses: actions/cache@v3
        with:
          path: subprojects/packagecache
          key: meson-packagecache-${{ hashFiles('subprojects/*.wrap') }}

      - name: Setup
        run: |
          meson builddir --werror --buildtype=${{ matrix.buildtype }} \
            -Db_sanitize=address,undefined -Dtools=enabled -Ddocs=disabled \
            -Dbindings=none

      - name: Build
        run: |
          ninja -C builddir

      - name: Test
        run: |
          meson test -C builddir --setup=ci --print-errorlogs --no-stdsplit

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: ${{ github.job }}-${{ matrix.buildtype }}
          path: |
            builddir/meson-logs/
            /var/log/messages
            /var/log/syslog
