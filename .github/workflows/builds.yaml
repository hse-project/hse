name: Builds

on:
  push:
    branches:
      - master
      - v2.*
    paths-ignore:
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/workflows/**"
      - "!.github/workflows/builds.yaml"
      - .clang-format
      - .gitattributes
      - .gitignore
      - .shellcheckrc
      - LICENSE
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - "**.md"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/workflows/**"
      - "!.github/workflows/builds.yaml"
      - .clang-format
      - .gitattributes
      - .gitignore
      - .shellcheckrc
      - LICENSE

env:
  MESON_TESTTHREADS: 1

jobs:
  ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        toolchain: [gcc, clang]
        buildtype: [release, debug]

    steps:
      - name: Checkout HSE
        uses: actions/checkout@v2

      - name: Checkout hse-python
        uses: actions/checkout@v2
        with:
          repository: hse-project/hse-python
          path: subprojects/hse-python
          ref: ${{ github.base_ref || github.ref }}

      - name: Post-checkout
        run: |
          for b in hse-python; do
            git -C "subprojects/$b" checkout ${{ github.head_ref }} || true
          done

      - name: Initialize
        run: |
          sudo apt-get update
          sudo apt-get install build-essential ninja-build pkg-config \
            libbsd-dev libmicrohttpd-dev liburcu-dev libyaml-dev \
            libcurl4-openssl-dev python3-setuptools libmongoc-dev \
            libbson-dev libssl-dev libsasl2-dev
          sudo python3 -m pip install meson Cython

      - name: Setup gcc toolchain
        if: ${{ matrix.toolchain == 'gcc' }}
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
          sudo apt-get install gcc g++

        # Fix false warnings by installing newer version in 18.04
        #
        # Ignore deprecation warnings on 20.04 due to:
        #     https://github.com/cython/cython/issues/3474
      - name: Setup clang toolchain
        if: ${{ matrix.toolchain == 'clang' }}
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          sudo apt-get install \
            $(if [ $(lsb_release -rs) = "18.04" ]; then echo clang-10; else clang; fi;)
          if [ $(lsb_release -rs) = "20.04" ]; then
            echo "CFLAGS=-Wno-deprecated ${CFLAGS}" >> $GITHUB_ENV
          fi

      - name: Setup
        run: |
          meson builddir -Dbuildtype=${{ matrix.buildtype }} -Dtools=enabled \
            -Ddocs=disabled -Dbindings=all -Dycsb=true -Dwerror=true

      - name: Build
        run: |
          ninja -C builddir

      - name: Test
        run: |
          ulimit -c unlimited
          meson test -C builddir --setup=ci --print-errorlogs --no-stdsplit

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ matrix.os }}-${{ matrix.toolchain }}-${{ matrix.buildtype }}
          path: |
            builddir/meson-logs/
            /var/log/messages
            /var/log/syslog

  fedora:
    runs-on: ubuntu-latest
    container:
      image: fedora:${{ matrix.image-tag }}
    strategy:
      fail-fast: false
      matrix:
        image-tag: [35]
        toolchain: [gcc, clang]
        buildtype: [release, debug]

    steps:
      - name: Checkout HSE
        uses: actions/checkout@v2

      - name: Checkout hse-python
        uses: actions/checkout@v2
        with:
          repository: hse-project/hse-python
          path: subprojects/hse-python
          ref: ${{ github.base_ref || github.ref }}

      - name: Post-checkout
        run: |
          for b in hse-python; do
            git -C "subprojects/$b" checkout ${{ github.head_ref }} || true
          done

      - name: Initialize
        run: |
          dnf group install -y --with-optional \
            "C Development Tools and Libraries"
          dnf install -y git ninja-build meson python-unversioned-command \
            libmicrohttpd-devel userspace-rcu-devel libyaml-devel libbsd-devel \
            libcurl-devel libpmem-devel xz mongo-c-driver libbson \
            openssl-devel cyrus-sasl-devel ncurses-devel \
            java-1.8.0-openjdk-devel python3-devel python3-Cython libxml2 \
            libxslt

      - name: Setup gcc toolchain
        if: ${{ matrix.toolchain == 'gcc' }}
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
          dnf install -y gcc gcc-c++

      - name: Setup clang toolchain
        if: ${{ matrix.toolchain == 'clang' }}
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          dnf install -y clang

      - name: Setup
        run: |
          meson builddir -Dbuildtype=${{ matrix.buildtype }} \
            --fatal-meson-warnings -Dtools=enabled -Dpmem=enabled \
            -Ddocs=disabled -Dbindings=all -Dycsb=true -Dwerror=true

      - name: Build
        run: |
          ninja -C builddir

      - name: Test
        run: |
          ulimit -c unlimited
          meson test -C builddir --setup=ci --print-errorlogs --no-stdsplit

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}-${{ matrix.image-tag }}-${{ matrix.toolchain }}-${{ matrix.buildtype }}
          path: |
            builddir/meson-logs/
            /var/log/messages
            /var/log/syslog

  almalinux:
    runs-on: ubuntu-latest
    container:
      image: almalinux:${{ matrix.image-tag }}
    strategy:
      fail-fast: false
      matrix:
        image-tag: [8]
        toolchain: [gcc, clang]
        buildtype: [release, debug]

    steps:
      - name: Checkout HSE
        uses: actions/checkout@v2

      - name: Checkout hse-python
        uses: actions/checkout@v2
        with:
          repository: hse-project/hse-python
          path: subprojects/hse-python
          ref: ${{ github.base_ref || github.ref }}

      - name: Post-checkout
        run: |
          for b in hse-python; do
            git -C "subprojects/$b" checkout ${{ github.head_ref }} || true
          done

      - name: Initialize
        run: |
          dnf install -y sudo dnf-plugins-core epel-release
          dnf config-manager --set-enabled powertools
          dnf group install -y --with-optional "Development Tools"
          dnf install -y git ninja-build libmicrohttpd-devel \
            userspace-rcu-devel libyaml-devel libbsd-devel libcurl-devel \
            libpmem-devel xz mongo-c-driver libbson openssl-devel \
            cyrus-sasl-devel ncurses-devel java-1.8.0-openjdk-devel \
            python36 python36-devel libxml2 libxslt
          python3 -m pip install meson Cython

      - name: Setup gcc toolchain
        if: ${{ matrix.toolchain == 'gcc' }}
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
          dnf install -y gcc gcc-c++

      - name: Setup clang toolchain
        if: ${{ matrix.toolchain == 'clang' }}
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          dnf install -y clang

      - name: Setup
        run: |
          meson builddir -Dbuildtype=${{ matrix.buildtype }} -Dtools=enabled \
            -Ddocs=disabled -Dbindings=all -Dycsb=true -Dwerror=true

      - name: Build
        run: |
          ninja -C builddir

      - name: Test
        run: |
          ulimit -c unlimited
          meson test -C builddir --setup=ci --print-errorlogs --no-stdsplit

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}-${{ matrix.image-tag }}-${{ matrix.toolchain }}-${{ matrix.buildtype }}
          path: |
            builddir/meson-logs/
            /var/log/messages
            /var/log/syslog

  architectures:
    runs-on: ubuntu-latest
    container:
      image: debian:11
    strategy:
      fail-fast: false
      matrix:
        buildtype: [release, debug]
        arch: [s390x]

    steps:
      - name: Checkout HSE
        uses: actions/checkout@v2

      - name: Checkout hse-python
        uses: actions/checkout@v2
        with:
          repository: hse-project/hse-python
          path: subprojects/hse-python
          ref: ${{ github.base_ref || github.ref }}

      - name: Post-checkout
        run: |
          for b in hse-python; do
            git -C "subprojects/$b" checkout ${{ github.head_ref }} || true
          done

      - name: Initialize
        run: |
          dpkg --add-architecture ${{ matrix.arch }}
          apt-get -y update
          apt-get -y install python3 python3-pip pkg-config ninja-build cmake \
            gawk build-essential crossbuild-essential-${{ matrix.arch }} \
            libpython3-dev:${{ matrix.arch }} liburcu-dev:${{ matrix.arch }} \
            libcurl4-openssl-dev:${{ matrix.arch }} \
            libbsd-dev:${{ matrix.arch }} libmicrohttpd-dev:${{ matrix.arch }} \
            libyaml-dev:${{ matrix.arch }} libmongoc-dev:${{ matrix.arch }} \
            libbson-dev:${{ matrix.arch }} libncurses-dev:${{ matrix.arch }} \
            openjdk-11-jdk:${{ matrix.arch }} openjdk-11-jdk
          python3 -m pip install meson Cython

      - name: Setup
        run: |
          meson builddir --cross-file cross/${{ matrix.arch }}.ini \
            --cross-file cross/common.ini --cross-file cross/ci.ini \
            -Dbuildtype=${{ matrix.buildtype }} -Dycsb=true -Dtools=enabled \
            -Ddocs=disabled -Dbindings=all -Dwerror=true

      - name: Build
        run: |
          ninja -C builddir

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}-${{ matrix.arch }}-${{ matrix.buildtype }}
          path: |
            builddir/meson-logs/

  asan-ubsan:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    strategy:
      fail-fast: false
      matrix:
        buildtype: [release, debug]

    steps:
      - name: Checkout HSE
        uses: actions/checkout@v2

      - name: Checkout hse-python
        uses: actions/checkout@v2
        with:
          repository: hse-project/hse-python
          path: subprojects/hse-python
          ref: ${{ github.base_ref || github.ref }}

      - name: Post-checkout
        run: |
          for b in hse-python; do
            git -C "subprojects/$b" checkout ${{ github.head_ref }} || true
          done

      - name: Initialize
        run: |
          dnf group install -y --with-optional \
            "C Development Tools and Libraries"
          dnf install -y git ninja-build meson python-unversioned-command \
            libmicrohttpd-devel userspace-rcu-devel libyaml-devel libbsd-devel \
            libcurl-devel libpmem-devel xz mongo-c-driver libbson \
            openssl-devel cyrus-sasl-devel ncurses-devel \
            java-1.8.0-openjdk-devel python3-devel python3-Cython \
            libxml2-devel libxslt-devel libasan libubsan

      - name: Setup
        run: |
          meson builddir -Dbuildtype=${{ matrix.buildtype }} \
            -Db_sanitize=address,undefined -Dwerror=true -Dtools=enabled \
            -Ddocs=disabled -Dbindings=all -Dycsb=true

      - name: Build
        run: |
          ninja -C builddir

      - name: Test
        run: |
          ulimit -c unlimited
          meson test -C builddir --setup=ci --print-errorlogs --no-stdsplit

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}-${{ matrix.buildtype }}
          path: |
            builddir/meson-logs/
            /var/log/messages
            /var/log/syslog

  subprojects:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout HSE
        uses: actions/checkout@v2

      - name: Checkout hse-python
        uses: actions/checkout@v2
        with:
          repository: hse-project/hse-python
          path: subprojects/hse-python
          ref: ${{ github.base_ref || github.ref }}

      - name: Post-checkout
        run: |
          for b in hse-python; do
            git -C "subprojects/$b" checkout ${{ github.head_ref }} || true
          done

      - name: Initialize
        run: |
          sudo apt-get update
          sudo apt-get install build-essential ninja-build pkg-config
          sudo python3 -m pip install meson Cython

      - name: Setup
        run: |
          meson builddir -Dwrap_mode=forcefallback -Dtools=enabled \
            -Ddocs=disabled -Dbindings=all -Dycsb=true -Dwerror=true

      - name: Build
        run: |
          ninja -C builddir

      - name: Test
        run: |
          ulimit -c unlimited
          meson test -C builddir --setup=ci --print-errorlogs --no-stdsplit

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: |
            builddir/meson-logs/
            /var/log/messages
            /var/log/syslog
