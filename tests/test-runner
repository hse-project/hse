#!/usr/bin/env python3

import abc
import argparse
import os
import pathlib
import signal
import subprocess
import sys
import tempfile
from types import FrameType
from typing import List, Optional, cast


class Test(abc.ABC):
    def __init__(self, program: pathlib.Path, *args: str) -> None:
        super().__init__()

        self._program = program
        self._args = args

    @abc.abstractproperty
    def name(self) -> str:
        raise NotImplementedError()

    @abc.abstractmethod
    def command_line(self, home: str) -> List[str]:
        raise NotImplementedError()

    @staticmethod
    def create(program: pathlib.Path, *args: str) -> "Test":
        runner = os.getenv("HSE_TEST_RUNNER_RUNNER")

        if runner is None:
            return PlainTest(program, *args)
        elif runner == "bash":
            return BashTest(program, *args)
        elif runner == "python":
            return PythonTest(program, *args)
        elif runner == "pytest":
            return PytestTest(program, *args)
        elif runner == "java":
            return JavaTest(program, *args)
        else:
            raise NotImplementedError()


class PlainTest(Test):
    def __init__(self, program: pathlib.Path, *args: str) -> None:
        super().__init__(program, *args)

    @property
    def name(self) -> str:
        return self._program.stem

    def command_line(self, home: str) -> List[str]:
        return [str(self._program), "-C", str(home), *self._args]


class PythonTest(Test):
    def __init__(self, program: pathlib.Path, *args: str) -> None:
        super().__init__(program, *args)

        assert len(self._args) >= 1

    @property
    def name(self) -> str:
        return pathlib.Path(self._args[0]).stem

    def command_line(self, home: str) -> List[str]:
        return [str(self._program), self._args[0], "-C", str(home), *self._args[1:]]


class BashTest(Test):
    def __init__(self, program: pathlib.Path, *args: str) -> None:
        super().__init__(program, *args)

        assert len(self._args) >= 1

    @property
    def name(self) -> str:
        return pathlib.Path(self._args[0]).stem

    def command_line(self, home: str) -> List[str]:
        return [str(self._program), self._args[0], "-C", str(home), *self._args[1:]]


class PytestTest(Test):
    def __init__(self, program: pathlib.Path, *args: str) -> None:
        super().__init__(program, *args)

        assert len(self._args) >= 1

    @property
    def name(self) -> str:
        # Parsing the pytest command lines is brittle, so just skip it.
        return "pytest"

    def command_line(self, home: str) -> List[str]:
        return [str(self._program), *self._args, "-C", str(home)]


class JavaTest(Test):
    def __init__(self, program: pathlib.Path, *args: str) -> None:
        super().__init__(program, *args)

    @property
    def name(self) -> str:
        for a in self._args:
            if a.startswith("-Dtest=com.micron.hse."):
                return a[len("-Dtest=com.micron.hse."):]

        return "java"

    def command_line(self, home: str) -> List[str]:
        return [str(self._program), *self._args, f"-Dhome={home}"]


class Args(argparse.Namespace):
    program: pathlib.Path
    arguments: List[str]
    dir: pathlib.Path


def default_dir() -> str:
    dir = os.getenv("HSE_TEST_RUNNER_DIR")
    if dir:
        return dir
    root = os.getenv("MESON_BUILD_ROOT")
    if root:
        return root
    return tempfile.gettempdir()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("program", type=pathlib.Path, help="Program to run")
    parser.add_argument("arguments", nargs="*", help="Arguments to pass to program")
    parser.add_argument(
        "-d",
        "--dir",
        type=pathlib.Path,
        help="Directory to place home in; Can also set the HSE_TEST_RUNNER_DIR environment variable",
        default=pathlib.Path(default_dir()).resolve()
    )

    args = cast(Args, parser.parse_args())

    test = Test.create(args.program, *args.arguments)

    with tempfile.TemporaryDirectory(prefix=f"mtest-{test.name}-", dir=args.dir) as home:
        proc = subprocess.Popen(test.command_line(home))

        def proxy(s: int, frame: Optional[FrameType]):
            proc.send_signal(s)

        for s in set(signal.Signals) - {signal.SIGKILL, signal.SIGSTOP, signal.SIGCHLD}:
            signal.signal(s, proxy)

        rc = proc.wait()
        # Negative return value means killed by signal
        # -2 = SIGINT, -29 = SIGIO, ...
        if rc < 0:
            sys.exit(128 - rc)
        else:
            sys.exit(rc)
