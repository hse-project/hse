# SPDX-License-Identifier: Apache-2.0 OR MIT
#
# SPDX-FileCopyrightText: Copyright 2021 Micron Technology, Inc.

# shellcheck shell=bash

set -u
set -o pipefail
set -e

# https://mesonbuild.com/Unit-tests.html#skipped-tests-and-hard-errors
# shellcheck disable=SC2034
SKIP_STATUS=77

err() {
    # reset OPTIND
    OPTIND=0
    local status=1
    while getopts ":s:" o "$@"; do
        case "${o}" in
            s) status="$OPTARG";;
            \?) echo "Invalid option $OPTARG" >&2; exit 1;;
            :) echo "Option $OPTARG requires an argument" >&2; exit 1;;
            *) exit 2;;
        esac
    done
    shift $((OPTIND-1))

    echo -e "$@" >&2
    exit "$status"
}

usage() {
    echo "Usage: $0 [-C home]"
}

home=
while getopts ":hC:" o; do
    case "${o}" in
        h) usage; exit 0;;
        C) home="$OPTARG";;
        \?) err "Invalid option $OPTARG\n\n$(usage)" >&2;;
        :) err "Option $OPTARG requires an argument\n\n$(usage)" >&2;;
        *) exit 2;;
    esac
done
shift $((OPTIND-1))

# If home wasn't provided, use a temporary directory.
if [ -z "$home" ]; then
    if [ -n "${HSE_TEST_RUNNER_DIR+x}" ]; then
        tmpdir="$HSE_TEST_RUNNER_DIR"
    elif [ -n "${MESON_BUILD_ROOT+x}" ]; then
        tmpdir="$MESON_BUILD_ROOT"
    else
        tmpdir="/tmp"
    fi

    home=$(mktemp --directory --tmpdir="$tmpdir" -t "mtest-$(basename -- "$0" ".${0##*.}")-XXXXXX")
fi

cmd () {
    # reset OPTIND from global getopts
    OPTIND=0
    local check_status=1 # 0=ignore, 1=expect success, 2=expect error
    local check_signal=0
    local status
    while getopts ":ies:" o "$@"; do
        case "${o}" in
            i) # ignore status
                check_status=0
                ;;
            e) # expect error status
                check_status=2
                ;;
            s) # expect kill by signal
                check_signal=$2
                check_signal=$((check_signal + 128))
                check_status=2
                ;;
        \?) err "Invalid option $OPTARG" >&2;;
        :) err "Option $OPTARG requires an argument" >&2;;
        *) exit 2;;
        esac
    done
    shift $((OPTIND-1))

    set +e
    "$@"
    status=$?
    set -e

    case $check_status in
        0) ;;
        1)
            if [ "$status" -ne 0 ]; then
                err -s "$status" "ERROR: Expected success, got $status\n\t$*"
            fi
            ;;
        2)
            if [ "$status" -eq 0 ]; then
                err -s "-1" "ERROR: Expected non-zero\n\t$*"
            fi
            ;;
        *) exit 2;;
    esac

    # Killed by signal causes failure unless explicitly ignored.
    # special case: ignore 255 b/c many programs use exit(-1) which
    # maps to a return status of 255.
    if [ "$status" -ge 128 ] && [ "$status" -ne 255 ] && [ "$status" -ne "$check_signal" ]; then
        err -s "$status" Command terminated by signal $((status-128))
    fi
}

# This function should be run on test finalization. Usually this is done like:
#
# trap cleanup EXIT
#
# But in the event you need additional cleanup for your test, use it like so:
#
# custom () {
#     cleanup
#     # special cleanup
# }
cleanup () {
    rm -rf "$home" >&2
}

kvdb_create () {
    cmd hse kvdb create "$home" "$@" >&2
}

kvdb_drop () {
    cmd hse kvdb drop "$home" "$@" >&2
}

kvs_create () {
    if [ "$#" -lt 1 ]; then
        err kvs_create requires the name of the KVS at a minimum
    fi
    cmd hse kvs create "$home" "$@" >&2
    echo "$1"
}

kvs_drop () {
    if [ "$#" -lt 1 ]; then
        err kvs_drop requires the name of the KVS at a minimum
    fi
    cmd hse kvs drop "$home" "$@" >&2
    echo "$1"
}
