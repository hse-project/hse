#!/bin/bash

# SPDX-License-Identifier: Apache-2.0
#
# Copyright (C) 2020-2021 Micron Technology, Inc. All rights reserved.

set -u

CMD=${0##*/}

# Set up for tmp files and a trap to remove them
rm_temp_files=1
trap_sigs="0 1 2 3 15"
trap trap_proc $trap_sigs
trap_proc () {
    set +u
    if (( rm_temp_files )); then
	/bin/rm -fr "$TMP"
    fi >& /dev/null
    trap "" $trap_sigs
}

make_temp_dir () {
    TMP=$(mktemp -d /tmp/${CMD}.XXXXXX)
}

err () {
    while (( $# > 0 )); do
        echo "$1"
        shift
    done 1>&2
    exit 1
}

syntax () {
    err "$@" "Use -h for help"
    exit 1
}

help ()
{
    echo "$CMD: get kvs tree metrics"
    echo "Usage:"
    echo "    $CMD [options] <kvdb_home> [<kvs1> <kvs2> ...]"
    echo "Options:"
    echo "    -h, -?   // help"
    echo "    -b       // show byte counts (vs kbyte or mbyte)"
    echo "    -r       // raw output (eg, yaml if using rest interface)"
    echo "    -q       // quiet"
    echo "    -o <pre> // save output in files named <pre>.<mp>.<kvs>.txt"
    exit 0
}


kvdb_home=
quiet=0
raw=0
bytes=0
out=""

more=1
while (( more && $# > 0 )); do
    case "$1" in
        (-\?|-h) help;;
        (-r)  raw=1; shift;;
        (-b)  bytes=1; shift;;
        (-q)  quiet=1; shift;;
        (-o)  [[ $# -gt 0 ]] || syntax "Option '$1' requires an argument"
              out=$2
              shift 2;;
        (-*)  syntax "Invalid option: '$1'";;
        (*)   kvdb_home=$1; shift; more=0;;
    esac
done

[[ "$kvdb_home" == "" ]] &&
    syntax "Need KVDB home dir"

make_temp_dir

if (( $# == 0 )); then

    hse kvdb info "$kvdb_home" > "$TMP"/tmp1 ||
        err "Failed: hse kvdb info $kvdb_home"

    cat "$TMP"/tmp1 \
        | sed -ne '/^  *kvslist:$/,$ p' \
        | sed -e 1d -e 's/^ *- //' \
        > "$TMP"/tmp2

    kvslist=($(cat "$TMP"/tmp2))
    (( kvslist_len = ${#kvslist[@]} ))
    if (( kvslist_len == 0 )); then
        err "KVDB $kvdb_home has no KVSes?"
    fi
else
    kvslist=("$@")
    (( kvslist_len = ${#kvslist[@]} ))
fi

set +u

get_tree_shape () {
    local metrics_cmd1=($(command -v cn_metrics.py) -C "$1" "$2")
    local metrics_cmd2=($(command -v cn_metrics) "$1" "$2")
    local out="$TMP"/shape

    if (( raw )); then
        metrics_cmd1+=("-y")
    fi
    if (( bytes )); then
        metrics_cmd2+=("-f" "s")
    fi

    "${metrics_cmd1[@]}" > "$out" 2>/dev/null
    if [[ "$?" != "0" || ! -s "$out" ]]; then
        "${metrics_cmd2[@]}" > "$out"
        if [[ $? != 0  || ! -s "$out" ]]; then
            err "Cannot get tree metrics.  Both commands failed:" \
                "${metrics_cmd1[*]}" \
                "${metrics_cmd2[*]}"
        fi
    fi
    cat "$out"
}

for kvs in "${kvslist[@]}"; do
    if [[ -n "$out" ]]; then
        f=$out.$kvs.txt
        (( quiet )) || echo "$f"
        get_tree_shape "$kvdb_home" "$kvs" > "$f"
    else
        (( quiet )) || { echo; echo "== $kvs"; }
        get_tree_shape "$kvdb_home" "$kvs"
    fi
done
